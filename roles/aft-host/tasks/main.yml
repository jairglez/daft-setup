- name: remove not required boot scripts
  file: path=/opt/scripts/boot/{{ item }} state=absent
  with_items:
  - am335x_evm.sh
  - autoconfigure_usb0.sh
  - capemgr.sh

- name: disable not required services
  service: name={{ item }} enabled=no
  with_items:
  - connman

- name: install required packages
  apt: pkg={{ item }} state=latest
  with_items:
  - nfs-common
  - dnsmasq
  - python3-setuptools
  - python3-pip
  - expect
  - ntp
  - ntpdate
  - psmisc

- name: install required Python libraries 
  pip: executable=pip3 name={{ item }} state=latest
  with_items:
  - pyserial
  - netifaces
  - unittest-xml-reporting

- name: configure https proxy for git
  git_config: scope=global name=https.proxy value={{ https_proxy }}
  tags: aft_install

- name: configure http proxy for git
  git_config: scope=global name=http.proxy value={{ http_proxy }}
  tags: aft_install

- name: clone DAFT repository
  git: repo={{ daft_repo_url }} dest={{ daft_repo_path }}
  tags: aft_install

- name: install AFT
  shell: "cd {{ daft_testing_harness_path }}; python3 ./setup.py install"
  tags: aft_install

- name: copy AFT initialization scripts
  copy:
    src: "{{ aft_init_scripts_path }}/{{ item }}"
    dest: "{{ aft_init_scripts_dest_path }}"
    remote_src: True
  with_items:
  - stop_libcomposite
  - start_libcomposite
  - initialize_testing_harness
  tags: aft_init

- name: copy AFT initialization services to systemd path
  copy:
    src: "{{ aft_init_scripts_path }}/{{ item }}"
    dest: "{{ systemd_system_path }}"
    remote_src: True
  with_items:
  - initialize_testing_harness.service
  - libcomposite.service
  tags: aft_init

- name: enable AFT initialization services
  file:
    src: "{{ systemd_system_path }}/{{ item }}"
    dest: "{{ multi_user_target_wants_path }}/{{ item }}"
    state: link
  with_items:
  - initialize_testing_harness.service
  - libcomposite.service
  tags: aft_init

- name: copy AFT kbsequences directory
  command: cp -ruv {{ daft_testing_harness_extras_path }}/kbsequences {{ home_path }}
  register: kbsequences_cp_output
  changed_when: kbsequences_cp_output.stdout != ""
  tags: aft_init

- name: create required folders for test harness
  file: path="{{ item }}" state=directory
  with_items:
  - "{{ home_path }}/support_image"
  - "{{ home_path }}/workspace"
  - "{{ home_path }}/.ssh"
  - /ramdisk
  - /config
  tags: aft_init

- name: copy /var directory
  command: cp -ruv /var /_var
  register: var_cp_output
  changed_when: var_cp_output.stdout != ""
  tags: aft_init

- name: set NAT masquerading on external interface
  iptables:
    table: nat
    chain: POSTROUTING
    out_interface: "{{ aft_external_interface }}"
    jump: MASQUERADE
  register: iptables_ext_masquerading
  tags: network_config

- name: enable forwarding on internal interface
  iptables:
    chain: FORWARD
    in_interface: "{{ aft_internal_interface }}"
    jump: ACCEPT
  register: iptables_int_forwarding
  tags: network_config

- name: forward selected TCP port to DUT's IP address
  iptables:
    table: nat
    chain: PREROUTING
    in_interface: "{{ aft_external_interface }}"
    protocol: tcp
    destination_port: "{{ dut_dest_port }}"
    to_destination: "{{ dut_ip_address }}:{{ dut_port }}"
    jump: DNAT
  register: iptables_port_forwarding
  tags: network_config

- name: ensure iptables configuration file exists
  copy:
    content: ""
    dest: "{{ iptables_conf_file_path }}"
    force: no
  register: iptables_conf_file_exists
  tags: network_config

- name: save iptables
  shell: iptables-save > {{ iptables_conf_file_path }}
  when: >
    iptables_ext_masquerading.changed or
    iptables_int_forwarding.changed or
    iptables_port_forwarding.changed or
    iptables_conf_file_exists.changed 
  tags: network_config

- name: configure ip_forward on sysctl
  lineinfile:
    path: "{{ sysctl_conf_file_path }}" 
    state: present
    line: "net.ipv4.ip_forward = 1"
  tags: network_config

- name: configure network interfaces
  template: src=network_if_config.j2 dest={{ network_if_conf_file_path }} backup=no
  tags: network_config

- name: configure dnsmasq
  template: src=dnsmasq_config.j2 dest={{ dnsmasq_conf_file_path }} backup=no
  tags: network_config

- name: configure fstab
  template: src=fstab_config.j2 dest={{ fstab_conf_file_path }} backup=no
  tags: network_config

- name: ensure home ssh configuration file exists
  copy:
    content: ""
    dest: "{{ home_ssh_conf_file_path }}"
    force: no
  tags: network_config

- name: configure ssh
  blockinfile:
    path: "{{ home_ssh_conf_file_path }}"
    state: present
    block: |
      Host *
          IdentityFile {{ ssh_identity_file_path }}
  tags: network_config
